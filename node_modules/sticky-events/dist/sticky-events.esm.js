function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/**
 * Todo:
 * - Allow adding new stickies to a set of stickies
 * - Allow bottom stickies
 * - Allow deleting stickies? Is this needed?
 * - Add tests...
 */
var ClassName = {
  SENTINEL: 'sticky-events--sentinel',
  SENTINEL_TOP: 'sticky-events--sentinel-top',
  SENTINEL_BOTTOM: 'sticky-events--sentinel-bottom'
}; // StickyEvents class

var StickyEvents = /*#__PURE__*/function () {
  /**
   * Initialize a set of sticky elements with events
   *
   * @param {Element|Document} container
   * @param {boolean} enabled
   * @param {string} stickySelector
   */
  function StickyEvents() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$container = _ref.container,
        container = _ref$container === void 0 ? document : _ref$container,
        _ref$enabled = _ref.enabled,
        enabled = _ref$enabled === void 0 ? true : _ref$enabled,
        _ref$stickySelector = _ref.stickySelector,
        stickySelector = _ref$stickySelector === void 0 ? '.sticky-events' : _ref$stickySelector;

    _classCallCheck(this, StickyEvents);

    this.container = container;
    this.observers = [];
    this.stickyElements = Array.from(this.container.querySelectorAll(stickySelector));
    this.stickySelector = stickySelector;
    this.state = new Map();

    if (enabled) {
      this.enableEvents();
    }
  }
  /**
   * Initialize the state for a sticky:
   * 1. Default isSticky to false
   * 2. Create and observe a header sentinel
   * 3. Create and observe a footer sentinel
   *
   * @param {HTMLElement|Node} sticky
   */


  _createClass(StickyEvents, [{
    key: "setState",
    value: function setState(sticky) {
      if (this.state.get(sticky)) {
        return;
      }

      this.state.set(sticky, {
        isSticky: false,
        headerSentinel: this.addSentinel(sticky, ClassName.SENTINEL_TOP),
        footerSentinel: this.addSentinel(sticky, ClassName.SENTINEL_BOTTOM)
      });
    }
    /**
     * Initialize the intersection observers on `.sticky` elements within the specified container.
     * Container defaults to `document`.
     */

  }, {
    key: "enableEvents",
    value: function enableEvents() {
      var _this = this;

      if (window.self !== window.top) {
        console.warn('StickyEvents: There are issues with using IntersectionObservers in an iframe, canceling initialization. Please see https://github.com/w3c/IntersectionObserver/issues/183');
        return;
      } // Create IntersectionObservers for header and footer sentinels


      this.observers = {
        header: this.createHeaderObserver(),
        footer: this.createFooterObserver()
      }; // Then, initialize the sticky's state

      this.stickyElements.forEach(function (sticky) {
        _this.setState(sticky);
      });
    }
    /**
     * Reset the DOM to it's pre-sticky state.
     * 1. (Optionally) Fire a sticky-unstuck event on all stickies to reset them to their original unstuck state
     * 2. Disconnect and remove IntersectionObservers
     * 3. Clear out the global state
     *
     * @param {boolean} resetStickies
     */

  }, {
    key: "disableEvents",
    value: function disableEvents() {
      var _this2 = this;

      var resetStickies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (resetStickies) {
        this.stickyElements.forEach(function (sticky) {
          return _this2.fire(false, sticky);
        });
      }

      Object.values(this.observers).forEach(function (observer) {
        return observer.disconnect();
      });
      this.observers = null;
      this.state.clear();
    }
    /**
     * Add a list of stickies to the existing set
     *
     * @param {NodeList} stickies
     */

  }, {
    key: "addStickies",
    value: function addStickies(stickies) {
      var _this$stickyElements,
          _this3 = this;

      (_this$stickyElements = this.stickyElements).push.apply(_this$stickyElements, _toConsumableArray(stickies));

      this.stickyElements.forEach(function (sticky) {
        return _this3.setState(sticky);
      });
    }
    /**
     * Add a single sticky to the existing set
     *
     * @param {Node} sticky
     */

  }, {
    key: "addSticky",
    value: function addSticky(sticky) {
      this.stickyElements.push(sticky);
      this.setState(sticky);
    }
    /**
     * Create and observe a sentinel for given sticky. Type of sentinel is determined by className.
     *
     * @param {HTMLElement} sticky
     * @param {string} className
     * @returns {Element}
     */

  }, {
    key: "addSentinel",
    value: function addSentinel(sticky, className) {
      var sentinel = document.createElement('div');
      var stickyParent = sticky.parentElement; // Apply styles to the sticky element

      sticky.style.cssText = "\n      position: -webkit-sticky;\n      position: sticky;\n    "; // Apply default sentinel styles

      sentinel.classList.add(ClassName.SENTINEL, className);
      Object.assign(sentinel.style, {
        left: 0,
        position: 'absolute',
        right: 0,
        visibility: 'hidden'
      });

      switch (className) {
        case ClassName.SENTINEL_TOP:
          {
            stickyParent.insertBefore(sentinel, sticky); // Apply styles specific to the top sentinel

            Object.assign(sentinel.style, this.getSentinelPosition(sticky, sentinel, className), {
              position: 'relative'
            }); // Observe the sentinel

            this.observers.header.observe(sentinel);
            break;
          }

        case ClassName.SENTINEL_BOTTOM:
          {
            stickyParent.appendChild(sentinel); // Apply styles specific to the bottom sentinel

            Object.assign(sentinel.style, this.getSentinelPosition(sticky, sentinel, className)); // Observe the sentinel

            this.observers.footer.observe(sentinel);
            break;
          }
      }

      return sentinel;
    }
    /**
     * Sets up an intersection observer to notify `document` when elements with the `ClassName.SENTINEL_TOP` become
     * visible/hidden at the top of the sticky container.
     *
     * @returns {IntersectionObserver}
     */

  }, {
    key: "createHeaderObserver",
    value: function createHeaderObserver() {
      var _this4 = this;

      return new IntersectionObserver(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 1),
            record = _ref3[0];

        var boundingClientRect = record.boundingClientRect,
            isIntersecting = record.isIntersecting,
            rootBounds = record.rootBounds;
        var stickyParent = record.target.parentElement;
        var stickyTarget = stickyParent.querySelector(_this4.stickySelector);
        stickyParent.style.position = 'relative';

        if (boundingClientRect.bottom < rootBounds.bottom && isIntersecting) {
          _this4.fire(false, stickyTarget, StickyEvents.POSITION_TOP);
        } else if (boundingClientRect.bottom <= rootBounds.top && !isIntersecting) {
          _this4.fire(true, stickyTarget, StickyEvents.POSITION_TOP);
        }
      }, Object.assign({
        threshold: 0
      }, !(this.container instanceof HTMLDocument) && {
        root: this.container
      }));
    }
    /**
     * Sets up an intersection observer to notify `document` when elements with the `ClassName.SENTINEL_BOTTOM` become
     * visible/hidden at the bottom of the sticky container.
     *
     * @returns {IntersectionObserver}
     */

  }, {
    key: "createFooterObserver",
    value: function createFooterObserver() {
      var _this5 = this;

      return new IntersectionObserver(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 1),
            record = _ref5[0];

        var boundingClientRect = record.boundingClientRect,
            isIntersecting = record.isIntersecting,
            rootBounds = record.rootBounds;
        var stickyTarget = record.target.parentElement.querySelector(_this5.stickySelector);

        if (boundingClientRect.top < rootBounds.top && boundingClientRect.bottom < rootBounds.bottom && !isIntersecting) {
          _this5.fire(false, stickyTarget, StickyEvents.POSITION_BOTTOM);
        } else if (boundingClientRect.bottom > rootBounds.top && _this5.isSticking(stickyTarget) && isIntersecting) {
          _this5.fire(true, stickyTarget, StickyEvents.POSITION_BOTTOM);
        }
      }, Object.assign({
        threshold: 1
      }, !(this.container instanceof HTMLDocument) && {
        root: this.container
      }));
    }
    /**
     * Dispatch the following events:
     * - `sticky-change`
     * - `sticky-stuck` or `sticky-unstuck`
     *
     * @param {Boolean} isSticky
     * @param {Element} stickyTarget
     * @param {StickyEvents.POSITION_BOTTOM|StickyEvents.POSITION_TOP} position
     */

  }, {
    key: "fire",
    value: function fire(isSticky, stickyTarget, position) {
      var _this$state$get = this.state.get(stickyTarget),
          previouslySticky = _this$state$get.isSticky; // Don't fire any events if the new state is the same as the previous state


      if (previouslySticky === isSticky) {
        return;
      } // Fire some events if the state is changing


      stickyTarget.dispatchEvent(new CustomEvent(StickyEvents.CHANGE, {
        detail: {
          isSticky: isSticky,
          position: position
        },
        bubbles: true
      }));
      stickyTarget.dispatchEvent(new CustomEvent(isSticky ? StickyEvents.STUCK : StickyEvents.UNSTUCK, {
        detail: {
          isSticky: isSticky,
          position: position
        },
        bubbles: true
      })); // Update the sticky state

      this.state.set(stickyTarget, {
        isSticky: isSticky
      });
    }
    /**
     * Determine the position of the sentinel
     *
     * @param {Element|Node} stickyElement
     * @param {Element|Node} sentinel
     * @param {String} className
     * @returns {Object}
     */

  }, {
    key: "getSentinelPosition",
    value: function getSentinelPosition(stickyElement, sentinel, className) {
      var stickyStyle = window.getComputedStyle(stickyElement);
      var parentStyle = window.getComputedStyle(stickyElement.parentElement);

      switch (className) {
        case ClassName.SENTINEL_TOP:
          return {
            top: "calc(".concat(stickyStyle.getPropertyValue('top'), " * -1)"),
            height: 1
          };

        case ClassName.SENTINEL_BOTTOM:
          var parentPadding = parseInt(parentStyle.paddingTop);
          return {
            bottom: stickyStyle.top,
            height: "".concat(stickyElement.getBoundingClientRect().height + parentPadding, "px")
          };
      }
    }
    /**
     * Determine if the sticky element is currently sticking in the browser
     *
     * @param {Element} stickyElement
     * @returns {boolean}
     */

  }, {
    key: "isSticking",
    value: function isSticking(stickyElement) {
      var topSentinel = stickyElement.previousElementSibling;
      var stickyOffset = stickyElement.getBoundingClientRect().top;
      var topSentinelOffset = topSentinel.getBoundingClientRect().top;
      var difference = Math.round(Math.abs(stickyOffset - topSentinelOffset));
      var topSentinelTopPosition = Math.abs(parseInt(window.getComputedStyle(topSentinel).getPropertyValue('top')));
      return difference !== topSentinelTopPosition;
    }
  }]);

  return StickyEvents;
}(); // Events
StickyEvents.CHANGE = 'sticky-change';
StickyEvents.STUCK = 'sticky-stuck';
StickyEvents.UNSTUCK = 'sticky-unstuck'; // Position

StickyEvents.POSITION_BOTTOM = 'bottom';
StickyEvents.POSITION_TOP = 'top';

export default StickyEvents;
